AWSTemplateFormatVersion: 2010-09-09
Conditions:
  CreateInternetGateway: !Equals
    - !Ref InternetGatewayId
    - ''
  ExistingInternetGateway: !Not
    - !Equals
      - !Ref InternetGatewayId
      - ''
Description: Network build by NetworkTemplateBuilder
Outputs:
  PrivateSubnetId:
    Value: !Ref Private
  PublicSubnetId:
    Value: !Ref Public
  SecurityGroupId:
    Value: !Ref InstanceSecurityGroup
Parameters:
  AvailabilityZone:
    Description: (Optional) The zone in which you want to create your subnet(s)
    Type: String
  InternetGatewayId:
    Description: (Optional) The id of the gateway (will be created if not specified)
    Type: String
  PrivateCIDR:
    AllowedPattern: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/(1[6-9]|2[0-9]|3[0-2])$'
    Description: The CIDR of the Private
    Type: String
  PublicCIDR:
    AllowedPattern: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/(1[6-9]|2[0-9]|3[0-2])$'
    Description: The CIDR of the Public
    Type: String
  BucketName:
    AllowedPattern: '[0-9a-z][0-9a-z-.]*'
    Description: The name of S3 bucket
    Type: String
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Ref BucketName
    DeletionPolicy: Delete
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security settings
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        CidrIp: 10.0.0.0/16
  DefaultRouteDependsOnPublic:
    Condition: CreateInternetGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !If
        - CreateInternetGateway
        - !Ref InternetGateway
        - !Ref InternetGatewayId
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
  DefaultRouteNoDependsOnPublic:
    Condition: ExistingInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !If
        - CreateInternetGateway
        - !Ref InternetGateway
        - !Ref InternetGatewayId
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
  InternetGateway:
    Condition: CreateInternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'parallelcluster:internet-gateway'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
    Type: 'AWS::EC2::InternetGateway'
  NatEIPPublic:
    Properties:
      Domain: vpc
    Type: 'AWS::EC2::EIP'
  NatGatewayPublic:
    Properties:
      AllocationId: !GetAtt
        - NatEIPPublic
        - AllocationId
      SubnetId: !Ref Public
    Type: 'AWS::EC2::NatGateway'
  NatRoutePrivate:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayPublic
      RouteTableId: !Ref RouteTablePrivate
    Type: 'AWS::EC2::Route'
  Private:
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'parallelcluster:private-subnet'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  Public:
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PublicCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'parallelcluster::public-subnet'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
    Type: 'AWS::EC2::Subnet'
  RouteAssociationPrivate:
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref Private
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteAssociationPublic:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Public
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value: 'parallelcluster:route-table-private'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
    Type: 'AWS::EC2::RouteTable'
  RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: 'parallelcluster:route-table-public'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref VPC
    Type: 'AWS::EC2::RouteTable'
  VPCGatewayAttachment:
    Condition: CreateInternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: 'AWS::EC2::VPCGatewayAttachment'
